# Paulo C Compiler - gramática simplificada
#
# Comentários são feitos usando o símbolo '#'. Tudo após ele em uma linha será ignorado.
# Linhas vazias também serão ignoradas.
#
# Uma produção é definida por nao_terminal := [lista_de_simbolos...]
# Qualquer símbolo que não consta na lista de tokens (também chamados de terminais)
# a seguir será considerado um não-terminal (também chamado de variável).
# A lista foi gerada automaticamente e serve apenas como consulta. Qualquer
# alteração não afetará o resultado do código.
#
#
# Lista de tokens e seus respectivos valores:
# 0,  0: identificador
#
# 1,  0: auto
# 1,  1: break
# 1,  2: case
# 1,  3: char
# 1,  4: const
# 1,  5: continue
# 1,  6: default
# 1,  7: do
# 1,  8: double
# 1,  9: else
# 1, 10: enum
# 1, 11: extern
# 1, 12: float
# 1, 13: for
# 1, 14: goto
# 1, 15: if
# 1, 16: int
# 1, 17: long
# 1, 18: register
# 1, 19: return
# 1, 20: short
# 1, 21: signed
# 1, 22: sizeof
# 1, 23: static
# 1, 24: struct
# 1, 25: switch
# 1, 26: typedef
# 1, 27: union
# 1, 28: unsigned
# 1, 29: void
# 1, 30: volatile
# 1, 31: while
#
# 2,  0: string-literal
# 2,  1: char-literal
# 2,  2: int-literal
# 2,  3: unsigned-int-literal
# 2,  4: long-int-literal
# 2,  5: unsigned-long-int-literal
# 2,  6: float-literal
# 2,  7: double-literal
# 2,  8: long-double-literal
#
# 3,  0: ->
# 3,  1: .
# 3,  2: !
# 3,  3: ~
# 3,  4: ++
# 3,  5: --
# 3,  6: *
# 3,  7: &
# 3,  8: /
# 3,  9: %
# 3, 10: +
# 3, 11: -
# 3, 12: <<
# 3, 13: >>
# 3, 14: <
# 3, 15: <=
# 3, 16: >
# 3, 17: >=
# 3, 18: ==
# 3, 19: !=
# 3, 20: ^
# 3, 21: |
# 3, 22: &&
# 3, 23: ||
# 3, 24: ?
# 3, 25: =
# 3, 26: +=
# 3, 27: -=
# 3, 28: *=
# 3, 29: /=
# 3, 30: %=
# 3, 31: &=
# 3, 32: ^=
# 3, 33: |=
# 3, 34: <<=
# 3, 35: >>=
#
# 4,  0: (
# 4,  1: )
# 4,  2: [
# 4,  3: ]
# 4,  4: {
# 4,  5: }
# 4,  6: ,
# 4,  7: :
# 4,  8: ;


# Escopo global
INICIO := FUNCAO-D INICIO'
INICIO' := FUNCAO-D INICIO'
INICIO' :=

# Função: Protótipo e Definição
FUNCAO-D := TIPO identificador ( PARAM-F-LIST ) FUNCAO-D'
FUNCAO-D' := FUNCAO-PRO
FUNCAO-D' := FUNCAO-DEF

# TODO: Função: Parâmetros formais
PARAM-F-LIST :=

# Tipo
TIPO := void
TIPO := char
TIPO := short
TIPO := int
TIPO := long
TIPO := float
TIPO := double
TIPO := signed
TIPO := unsigned
TIPO := struct identificador
TIPO := identificador

# Função: Protótipo
FUNCAO-PRO := ;

# Função: Definição
FUNCAO-DEF := { STMT-LIST }

# Statements
STMT-LIST := STMT STMT'
STMT-LIST :=

STMT' := STMT STMT'
STMT' :=

STMT := STMT-COMPOSTO 	# TALVEZ REMOVER
STMT := STMT-EXPR
STMT := STMT-COND
STMT := STMT-LAÇO
STMT := STMT-PULO

# Statement composto (talvez seja recursão à esquerda)
STMT-COMPOSTO := { STMT-LIST }

# TODO: Expressões (termina em ;)
STMT-EXPR := EXPR ;

EXPR := T E'
E' := + T E'
E' :=
T := F T'
T' := * F T'
T' :=
F := ( EXPR )
F := identificador
F := string-literal
F := char-literal
F := int-literal
F := unsigned-int-literal
F := long-int-literal
F := unsigned-long-int-literal
F := float-literal
F := double-literal
F := long-double-literal


# Condicional
STMT-COND := if ( EXPR ) STMT-COMPOSTO STMT-COND'
STMT-COND' := else STMT-COMPOSTO
STMT-COND' :=

# Laço
STMT-LAÇO := while ( EXPR ) STMT

# Pulo incondicional
STMT-PULO := STMT-PULO' ;
STMT-PULO' := continue
STMT-PULO' := break
STMT-PULO' := return STMT-PULO-RETURN
STMT-PULO-RETURN := EXPR
STMT-PULO-RETURN :=
